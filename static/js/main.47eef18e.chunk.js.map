{"version":3,"sources":["serviceWorker.ts","Assets/Colors.ts","Components/Button/style.ts","Components/Button/index.tsx","Components/Task/style.ts","Components/Task/index.tsx","Components/Column/style.ts","Components/Column/index.tsx","Components/Panel/style.ts","Temp/initialData.ts","Components/Panel/index.tsx","Components/FakeInput/style.ts","Components/FakeInput/index.tsx","Components/Modal/style.ts","Components/Modal/index.tsx","Redux/state.ts","Components/TaskModal/index.tsx","Redux/task.ts","Views/Home/style.ts","Views/Home/index.tsx","Redux/store.ts","Config/fontawesome.ts","index.tsx"],"names":["isLocalhost","Boolean","window","location","hostname","match","registerValidSW","swUrl","config","navigator","serviceWorker","register","then","registration","onupdatefound","installingWorker","installing","onstatechange","state","controller","console","log","onUpdate","onSuccess","catch","error","Colors","gray","grayLight","dark","white","background","Container","styled","button","width","isBlock","size","getFontSize","isRounded","variant","color","getColors","getHoverStylesForVariant","getDisabledStylesForVariant","Button","props","children","leftIcon","rightIcon","iconContainer","useCallback","icon","position","data-icon-direction","div","rgb","parseInt","substring","checkIfIsDarkOrLight","memo","order","id","taskFieldDisplay","task","dispatch","useDispatch","draggableId","index","innerRef","draggableProps","dragHandleProps","onClick","type","open","ref","Title","span","TaskList","title","tasks","addTask","droppableId","placeholder","droppableProps","length","map","key","ColumnList","task1","attibutes","hasDescription","hasComments","hasAttachments","task2","task3","task4","columns","column1","column2","column3","panel","Panel","useState","setPanel","setColumns","setTasks","addColumn","newColumn","prevState","newTask","Object","keys","newColumns","slice","push","changeColumnOrder","result","destination","source","sourceIndex","sourceId","destIndex","destId","column","find","splice","sourceColumn","findIndex","destColumn","useEffect","TempPanel","TempColumns","TempTasks","onDragEnd","direction","Input","input","FakeInput","value","onChange","disabled","getWidth","getHeight","CloseButton","Header","overlayStyles","backgroundColor","zIndex","Number","MAX_SAFE_INTEGER","dialogContentStyles","padding","margin","Modal","isOpen","onClose","HeaderElements","header","style","onDismiss","aria-label","INITIAL","theme","language","modalOpen","TaskModal","GlobalState","useSelector","store","taskID","e","target","Home","reducers","action","tasksGeted","newTasks","createStore","combineReducers","library","add","faTimes","ReactDOM","render","document","getElementById","URL","process","href","origin","addEventListener","fetch","headers","response","contentType","get","status","indexOf","ready","unregister","reload","checkValidServiceWorker"],"mappings":"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","file":"static/js/main.47eef18e.chunk.js","sourcesContent":["// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(\n      process.env.PUBLIC_URL,\n      window.location.href\n    );\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","export const Colors = {\n  gray: \"#bdbdbe\",\n  grayLight: \"#bdbdbe\",\n  dark: \"#1c1d25\",\n  white: \"#ffffff\",\n  background: \"#282c34\",\n};\n\nexport type TypeOfColors = keyof typeof Colors;\n\n/**\n * return true if color is dark\n * @param color HexColor Code\n */\nexport const checkIfIsDarkOrLight = (color: TypeOfColors) => {\n  // strip # and convert rrggbb to decimal\n  const rgb = parseInt(Colors[color].substring(1), 16);\n  // extract red\n  const r = (rgb >> 16) & 0xff;\n  // extract green\n  const g = (rgb >> 8) & 0xff;\n  // extract blue\n  const b = (rgb >> 0) & 0xff;\n\n  const luma = 0.2126 * r + 0.7152 * g + 0.0722 * b; // per ITU-R BT.709\n\n  return luma < 40;\n};\n","import { Props } from \".\";\n\nimport { Colors } from \"../../Assets/Colors\";\n\nimport styled from \"styled-components\";\n\nconst getFontSize = (size?: Props[\"size\"]) => {\n  switch (size) {\n    case \"xs\":\n      return \".7rem\";\n    case \"md\":\n      return \"1rem\";\n    case \"lg\":\n      return \"1.3rem\";\n    default:\n      return \"1rem\";\n  }\n};\n\nconst getColors = (variant?: Props[\"variant\"], color?: Props[\"color\"]) => {\n  switch (variant) {\n    case \"dashed\":\n      return `\n        background-color: transparent;\n        color: ${color ? Colors[color] : Colors.grayLight};\n        border: .4rem dashed ${Colors.grayLight};\n      `;\n    case \"outline\":\n      return `\n        background-color: transparent;\n        color: ${color ? Colors[color] : Colors.grayLight};\n        border-color: ${color ? Colors[color] : Colors.grayLight};\n      `;\n    case \"link\":\n      return `\n        background-color: transparent;\n        color: ${color ? Colors[color] : Colors.gray};\n      `;\n    case \"ghost\":\n      return `\n        background-color: transparent;\n        color: ${color ? Colors[color] : Colors.gray};\n      `;\n    default:\n      return `\n        color: ${Colors.grayLight};\n        background-color: ${color ? Colors[color] : Colors.gray};\n      `;\n  }\n};\n\nconst getHoverStylesForVariant = (\n  variant?: Props[\"variant\"],\n  color?: Props[\"color\"],\n) => {\n  switch (variant) {\n    case \"dashed\":\n      return `\n        background-color: ${Colors.grayLight};\n        color: ${color ? Colors[color] : Colors.dark};\n        border: .4rem dashed ${Colors.dark};\n      `;\n    case \"outline\":\n      return `\n       border-color: ${color ? `${Colors[color]}90` : `${Colors.gray}90`};\n     `;\n    case \"link\":\n      return `\n       text-decoration: underline;\n     `;\n    case \"ghost\":\n      return `\n       background-color: ${color ? `${Colors[color]}30` : `${Colors.gray}30`};\n     `;\n    default:\n      return \"box-shadow: 0px 5px 10px rgba(0,0,0,.2);\";\n  }\n};\n\nconst getDisabledStylesForVariant = (variant: Props[\"variant\"]) => {\n  switch (variant) {\n    case \"link\":\n      return `\n        color: ${Colors.grayLight};\n      `;\n    case \"outline\":\n      return `\n        color: ${Colors.grayLight};\n        border-color: ${Colors.grayLight};\n      `;\n    default:\n      return `\n        color: ${Colors.gray};\n        background-color: ${Colors.grayLight};\n        border-color: ${Colors.grayLight};\n      `;\n  }\n};\n\nexport const Container = styled.button<Props>`\n  min-width: ${({ width, isBlock }) =>\n    width ? width : isBlock ? \"100%\" : \"auto\"};\n  width: ${({ width, isBlock }) => (width ? width : isBlock ? \"100%\" : \"auto\")};\n  max-width: ${({ width, isBlock }) =>\n    width ? width : isBlock ? \"100%\" : \"auto\"};\n  font-size: ${({ size }) => getFontSize(size)};\n  border: 2px solid transparent;\n  border-radius: ${({ isRounded }) => (isRounded ? \"1rem\" : \".3rem\")};\n  padding: ${({ variant }) => (variant === \"link\" ? 0 : \" 0.3rem 1.5rem;\")};\n  font-weight: 600;\n  transition: all 0.15s ease-in-out;\n  padding: 1rem;\n  background-color: transparent;\n  color: white;\n\n  &:focus {\n    outline: 1px dotted #212121 !important;\n    outline: 5px auto -webkit-focus-ring-color !important;\n  }\n\n  ${({ variant, color }) => getColors(variant, color)};\n\n  &:not(:disabled) {\n    cursor: pointer;\n\n    &:hover {\n      ${({ variant, color }) => getHoverStylesForVariant(variant, color)};\n    }\n  }\n\n  &:disabled {\n    cursor: block;\n    pointer-events: none;\n    ${({ variant }) => getDisabledStylesForVariant(variant)};\n  }\n\n  [data-icon-direction=\"left\"] {\n    margin-right: 10px;\n  }\n  [data-icon-direction=\"right\"] {\n    margin-left: 10px;\n  }\n`;\n","import { IconProp } from \"@fortawesome/fontawesome-svg-core\";\nimport { FontAwesomeIcon } from \"@fortawesome/react-fontawesome\";\nimport React, { useCallback } from \"react\";\n\nimport { Colors } from \"Assets/Colors\";\n\nimport { Container } from \"./style\";\n\nexport interface Props extends React.ButtonHTMLAttributes<HTMLButtonElement> {\n  color?: keyof typeof Colors;\n  variant?: \"outline\" | \"link\" | \"ghost\" | \"dashed\";\n  isBlock?: boolean;\n  width?: string;\n  size?: \"xs\" | \"md\" | \"lg\";\n  isRounded?: boolean;\n  leftIcon?: IconProp;\n  rightIcon?: IconProp;\n}\n\nconst Button: React.FC<Props> = props => {\n  const { children, leftIcon, rightIcon } = props;\n\n  const iconContainer = useCallback(\n    (icon: IconProp, position: \"left\" | \"right\") => {\n      return (\n        <span data-icon-direction={position}>\n          {typeof icon === \"string\" ? <FontAwesomeIcon icon={icon} /> : icon}\n        </span>\n      );\n    },\n    [],\n  );\n\n  return (\n    <Container {...props}>\n      {leftIcon && iconContainer(leftIcon, \"left\")}\n      {children}\n      {rightIcon && iconContainer(rightIcon, \"right\")}\n    </Container>\n  );\n};\n\nexport default Button;\n","import { TypeOfColors, Colors, checkIfIsDarkOrLight } from \"Assets/Colors\";\n\nimport styled from \"styled-components\";\n\nexport const Container = styled.div<{ color?: TypeOfColors }>`\n  background-color: ${({ color }) => Colors[color || \"white\"]};\n  color: ${({ color }) =>\n    checkIfIsDarkOrLight(color || \"white\") ? \"white\" : \"black\"};\n  padding: 1rem;\n  border-radius: 0.3rem;\n  cursor: pointer !important;\n`;\n","import React, { memo } from \"react\";\nimport { Draggable } from \"react-beautiful-dnd\";\nimport { useDispatch } from \"react-redux\";\n\nimport { Panel as IPanel } from \"Interfaces/Panel\";\nimport { Task as ITask } from \"Interfaces/Task\";\n\nimport { Container } from \"./style\";\n\ninterface Props {\n  id: string;\n  order: number;\n  taskFieldDisplay: IPanel[\"taskFieldDisplay\"];\n  task: ITask;\n}\n\nconst Task: React.FC<Props> = ({ order, id, taskFieldDisplay, task }) => {\n  const dispatch = useDispatch();\n\n  return (\n    <Draggable draggableId={id} index={order}>\n      {({ innerRef, draggableProps, dragHandleProps }) => (\n        <Container\n          onClick={() =>\n            dispatch({\n              type: \"state/MODAL\",\n              open: true,\n            })\n          }\n          color={task.color}\n          ref={innerRef}\n          {...draggableProps}\n          {...dragHandleProps}\n        >\n          <p>{task[taskFieldDisplay]}</p>\n        </Container>\n      )}\n    </Draggable>\n  );\n};\n\nexport default memo(Task);\n","import { Colors } from \"Assets/Colors\";\n\nimport styled from \"styled-components\";\n\nexport const Container = styled.div`\n  background-color: ${Colors.dark};\n  min-height: 100%;\n  height: 100%;\n  max-height: 100%;\n  min-width: 350px;\n  width: 350px;\n  max-width: 350px;\n  padding: 1rem;\n  display: flex;\n  flex-direction: column;\n  border-radius: 0.3rem;\n`;\n\nexport const Title = styled.span`\n  overflow: hidden;\n  margin-bottom: 1rem;\n  font-weight: bold;\n`;\n\nexport const TaskList = styled.div`\n  min-height: calc(100% - 3.5rem);\n  height: calc(100% - 3.5rem);\n  max-height: calc(100% - 3.5rem);\n  overflow-y: auto;\n\n  padding-right: 1rem;\n\n  > * {\n    margin-bottom: 1rem;\n\n    &:last-child {\n      margin-bottom: 0;\n    }\n  }\n\n  &::-webkit-scrollbar {\n    width: 1rem;\n  }\n  &::-webkit-scrollbar-track {\n    box-shadow: inset 0 0 6px rgba(0, 0, 0, 0.8);\n  }\n  &::-webkit-scrollbar-thumb {\n    background-color: ${Colors.grayLight}50;\n    border-radius: 0.3rem;\n  }\n`;\n","import React, { memo } from \"react\";\nimport { Draggable, Droppable } from \"react-beautiful-dnd\";\n\nimport Button from \"Components/Button\";\nimport Task from \"Components/Task\";\n\nimport { Panel as IPanel } from \"Interfaces/Panel\";\nimport { Task as ITask } from \"Interfaces/Task\";\n\nimport { Container, TaskList, Title } from \"./style\";\n\ninterface Props {\n  id: string;\n  title: string;\n  order: number;\n  tasks: Array<ITask>;\n  addTask: (order: number) => void;\n  taskFieldDisplay: IPanel[\"taskFieldDisplay\"];\n}\n\nconst Column: React.FC<Props> = ({\n  id,\n  title,\n  order,\n  tasks,\n  addTask,\n  taskFieldDisplay,\n}) => {\n  return (\n    <Draggable draggableId={id} index={order}>\n      {({ innerRef, draggableProps, dragHandleProps }) => (\n        <Container ref={innerRef} {...draggableProps} {...dragHandleProps}>\n          <Title>{title}</Title>\n          <Droppable droppableId={id} type=\"task\">\n            {({ innerRef, placeholder, droppableProps }) => (\n              <TaskList ref={innerRef} {...droppableProps}>\n                {tasks.length >= 10 && (\n                  <Button\n                    isBlock\n                    size=\"lg\"\n                    variant=\"dashed\"\n                    onClick={() => addTask(order)}\n                  >\n                    Add Task\n                  </Button>\n                )}\n                {tasks.map((task, index) => (\n                  <Task\n                    key={task.id}\n                    id={task.id}\n                    order={index}\n                    taskFieldDisplay={taskFieldDisplay}\n                    task={task}\n                  />\n                ))}\n                {placeholder}\n                <Button\n                  isBlock\n                  size=\"lg\"\n                  variant=\"dashed\"\n                  onClick={() => addTask(order)}\n                >\n                  Add Task\n                </Button>\n              </TaskList>\n            )}\n          </Droppable>\n        </Container>\n      )}\n    </Draggable>\n  );\n};\n\nexport default memo(Column);\n","import { Colors } from \"Assets/Colors\";\n\nimport styled from \"styled-components\";\n\nconst SCROLLBAR_HEIGHT = 3;\nconst TITLE_HEIGHT = 8;\n\nexport const Container = styled.div`\n  background-color: ${Colors.background};\n  max-height: 100vh;\n  height: 100vh;\n  color: ${Colors.grayLight};\n  overflow: hidden;\n`;\n\nexport const ColumnList = styled.div`\n  padding-bottom: 1rem;\n  display: flex;\n  height: calc(100% - ${TITLE_HEIGHT}vh);\n  overflow-x: scroll;\n\n  > div {\n    margin-right: 1rem;\n\n    &:last-child {\n      margin-right: 0;\n    }\n  }\n\n  &::-webkit-scrollbar {\n    height: ${SCROLLBAR_HEIGHT}vh;\n  }\n  &::-webkit-scrollbar-track {\n    box-shadow: inset 0 0 6px rgba(0, 0, 0, 0.8);\n  }\n  &::-webkit-scrollbar-thumb {\n    background-color: ${Colors.grayLight}50;\n    border-radius: 0.3rem;\n  }\n`;\n\nexport const Title = styled.div`\n  padding: 1rem;\n  font-size: 1.5em;\n  font-weight: bold;\n  height: ${TITLE_HEIGHT}vh;\n  display: flex;\n  flex-direction: column;\n  justify-content: center;\n`;\n","import { Column } from \"Interfaces/Column\";\nimport { Panel } from \"Interfaces/Panel\";\nimport { Task } from \"Interfaces/Task\";\n\nexport const tasks: { [key: string]: Task } = {\n  task1: {\n    id: \"task1\",\n    title: \"Task 1\",\n    attibutes: {\n      hasDescription: false,\n      hasComments: 0,\n      hasAttachments: 0,\n    },\n  },\n  task2: {\n    id: \"task2\",\n    title: \"Task 2\",\n    attibutes: {\n      hasDescription: false,\n      hasComments: 0,\n      hasAttachments: 0,\n    },\n  },\n  task3: {\n    id: \"task3\",\n    title: \"Task 3\",\n    attibutes: {\n      hasDescription: false,\n      hasComments: 0,\n      hasAttachments: 0,\n    },\n  },\n  task4: {\n    id: \"task4\",\n    title: \"Task 4\",\n    attibutes: {\n      hasDescription: false,\n      hasComments: 0,\n      hasAttachments: 0,\n    },\n  },\n};\n\nexport const columns: { [key: string]: Column } = {\n  column1: {\n    id: \"column1\",\n    title: \"Column 1\",\n    tasks: [\"task1\", \"task2\", \"task3\", \"task4\"],\n  },\n  column2: {\n    id: \"column2\",\n    title: \"Column 2\",\n    tasks: [],\n  },\n  column3: {\n    id: \"column3\",\n    title: \"Column 3\",\n    tasks: [],\n  },\n};\n\nexport const panel: Panel = {\n  id: \"panel1\",\n  title: \"Panel 1\",\n  taskFieldDisplay: \"title\",\n  columns: [\"column1\", \"column2\", \"column3\"],\n};\n","import React, { useState, useEffect, useCallback } from \"react\";\nimport { DragDropContext, Droppable, DropResult } from \"react-beautiful-dnd\";\n\nimport Button from \"Components/Button\";\nimport Column from \"Components/Column\";\n\nimport { Column as IColumn } from \"Interfaces/Column\";\nimport { Panel as IPanel } from \"Interfaces/Panel\";\nimport { Task as ITask } from \"Interfaces/Task\";\n\nimport { Title, Container, ColumnList } from \"./style\";\n\nimport {\n  columns as TempColumns,\n  panel as TempPanel,\n  tasks as TempTasks,\n} from \"Temp/initialData\";\n\nconst Panel: React.FC<{ id: string }> = ({ id }) => {\n  const [panel, setPanel] = useState<IPanel>();\n  const [columns, setColumns] = useState<Array<IColumn>>([]);\n  const [tasks, setTasks] = useState<{ [key: string]: ITask }>({});\n\n  const addColumn = useCallback(() => {\n    // TODO: Send Request to Create Column\n\n    const newColumn = {\n      id: `column${columns.length + 1}`,\n      title: `Column ${columns.length + 1}`,\n      tasks: [],\n    };\n\n    setColumns(prevState => [...prevState, newColumn]);\n  }, [columns.length]);\n\n  const addTask = useCallback(\n    (order: number) => {\n      // TODO: Send Request to Create Task\n      const newTask = {\n        id: `task${Object.keys(tasks).length + 1}`,\n        title: `Task ${Object.keys(tasks).length + 1}`,\n        attibutes: {\n          hasDescription: false,\n          hasComments: 0,\n          hasAttachments: 0,\n        },\n      };\n\n      const newColumns = columns.slice();\n\n      newColumns[order].tasks.push(newTask.id);\n\n      setColumns(newColumns);\n      setTasks(prevState => ({\n        ...prevState,\n        [newTask.id]: newTask,\n      }));\n    },\n    [columns, tasks],\n  );\n\n  const changeColumnOrder = useCallback(\n    (result: DropResult) => {\n      if (!result.destination) return;\n\n      const {\n        source: { index: sourceIndex, droppableId: sourceId },\n        destination: { index: destIndex, droppableId: destId },\n        type,\n        draggableId,\n      } = result;\n\n      if (sourceId === destId && sourceIndex === destIndex) return;\n\n      const newColumns = columns.slice();\n\n      if (type === \"column\") {\n        const column = newColumns.find(column => column.id === draggableId);\n        newColumns.splice(sourceIndex, 1);\n        newColumns.splice(destIndex, 0, column as IColumn);\n      } else {\n        const sourceColumn = columns.findIndex(\n          column => column.id === sourceId,\n        );\n        const destColumn = columns.findIndex(column => column.id === destId);\n\n        newColumns[sourceColumn].tasks.splice(sourceIndex, 1);\n        newColumns[destColumn].tasks.splice(destIndex, 0, draggableId);\n      }\n\n      setColumns(newColumns);\n    },\n    [columns],\n  );\n\n  useEffect(() => {\n    setPanel(TempPanel);\n\n    const columns = [];\n\n    for (const id of TempPanel.columns) {\n      columns.push(TempColumns[id]);\n    }\n\n    setColumns(columns);\n\n    setTasks(TempTasks);\n  }, []);\n\n  return (\n    <Container>\n      <Title>{panel?.title}</Title>\n      <DragDropContext onDragEnd={changeColumnOrder}>\n        <Droppable droppableId={id} direction=\"horizontal\" type=\"column\">\n          {({ innerRef, placeholder, droppableProps }) => (\n            <ColumnList ref={innerRef} {...droppableProps}>\n              {columns.map((column, index) => (\n                <Column\n                  key={column.id}\n                  id={column.id}\n                  order={index}\n                  title={column.title}\n                  addTask={addTask}\n                  tasks={tasks ? column.tasks.map(id => tasks[id]) : []}\n                  taskFieldDisplay={panel?.taskFieldDisplay || \"title\"}\n                />\n              ))}\n              {placeholder}\n              <Button\n                width=\"350px\"\n                variant=\"dashed\"\n                size=\"lg\"\n                onClick={addColumn}\n              >\n                Add Column\n              </Button>\n            </ColumnList>\n          )}\n        </Droppable>\n      </DragDropContext>\n    </Container>\n  );\n};\n\nexport default Panel;\n","import { Colors } from \"Assets/Colors\";\n\nimport styled from \"styled-components\";\n\nexport const Input = styled.input`\n  padding: 0.3rem;\n  background-color: transparent;\n  border: none;\n  color: ${Colors.grayLight};\n  font-weight: bold;\n  font-size: 1.2em;\n`;\n","import React from \"react\";\n\nimport { Input } from \"./style\";\n\nconst FakeInput: React.FC<React.InputHTMLAttributes<HTMLInputElement>> = ({\n  value,\n  onChange,\n  disabled,\n}) => {\n  return <Input value={value} onChange={onChange} disabled={disabled} />;\n};\n\nexport default FakeInput;\n","import { Colors } from \"Assets/Colors\";\n\nimport styled from \"styled-components\";\n\nexport interface Props {\n  size?: \"xs\" | \"md\" | \"lg\";\n}\n\nconst getWidth = (size: Props[\"size\"]) => {\n  switch (size) {\n    case \"xs\":\n      return \"400px\";\n    case \"md\":\n      return \"600px\";\n    case \"lg\":\n      return \"1600px\";\n    default:\n      return \"400px\";\n  }\n};\n\nconst getHeight = (size: Props[\"size\"]) => {\n  switch (size) {\n    case \"xs\":\n      return \"400px\";\n    case \"md\":\n      return \"600px\";\n    case \"lg\":\n      return \"800px\";\n    default:\n      return \"400px\";\n  }\n};\n\nexport const Container = styled.div<Props>`\n  background: ${Colors.background};\n  border-radius: 0.3rem;\n  box-shadow: 0px 3px 6px #00000029;\n  cursor: auto;\n  display: flex;\n  flex-direction: column;\n  overflow: hidden;\n  padding: 2rem;\n\n  max-width: ${({ size }) => getWidth(size)};\n  width: 100%;\n\n  min-height: ${({ size }) => getHeight(size)};\n\n  margin: auto;\n  overflow-y: auto;\n\n  button {\n    margin-left: auto;\n    margin-bottom: 1rem;\n    padding: 0.5rem;\n  }\n`;\n\nexport const CloseButton = styled.button`\n  background-color: transparent;\n  border: none;\n  font-size: 1em;\n  color: ${Colors.grayLight};\n  cursor: pointer;\n`;\n\nexport const Header = styled.div`\n  display: flex;\n  justify-content: space-between;\n`;\n","import { FontAwesomeIcon } from \"@fortawesome/react-fontawesome\";\nimport { DialogOverlay, DialogContent } from \"@reach/dialog\";\nimport React from \"react\";\n\nimport \"@reach/dialog/styles.css\";\n\nimport { Colors } from \"Assets/Colors\";\n\nimport {\n  Container,\n  Props as ContainerProps,\n  CloseButton,\n  Header,\n} from \"./style\";\n\ninterface Props {\n  isOpen?: boolean;\n  onClose?: () => void;\n  \"aria-label\": string;\n  size?: ContainerProps[\"size\"];\n  header?: React.FC;\n}\n\nconst overlayStyles: React.CSSProperties = {\n  backgroundColor: `${Colors.dark}90`,\n  zIndex: Number.MAX_SAFE_INTEGER,\n};\n\nconst dialogContentStyles: React.CSSProperties = {\n  backgroundColor: \"transparent\",\n  zIndex: Number.MAX_SAFE_INTEGER,\n  padding: 0,\n  margin: \"7vh auto\",\n};\n\nconst Modal: React.FC<Props> = props => {\n  const { isOpen, onClose, size, children, header: HeaderElements } = props;\n\n  return (\n    <DialogOverlay style={overlayStyles} isOpen={isOpen} onDismiss={onClose}>\n      <DialogContent\n        aria-label={props[\"aria-label\"]}\n        style={dialogContentStyles}\n      >\n        <Container size={size}>\n          <Header>\n            {HeaderElements && <HeaderElements />}\n            <CloseButton onClick={onClose} aria-label=\"Fechar modal\">\n              <FontAwesomeIcon icon=\"times\" />\n            </CloseButton>\n          </Header>\n          {children}\n        </Container>\n      </DialogContent>\n    </DialogOverlay>\n  );\n};\n\nexport default Modal;\n","import { useSelector } from \"react-redux\";\n\nimport AppState, { State } from \"Interfaces/AppState\";\nimport { Panel as IPanel } from \"Interfaces/Panel\";\n\ntype Actions =\n  | { type: \"state/NAV_OPEN\" }\n  | { type: \"state/THEME\"; theme: \"dark\" | \"light\" }\n  | { type: \"state/LANGUAGE\"; language: \"EN\" | \"BR\" }\n  | { type: \"state/MODAL\"; open: boolean }\n  | { type: \"state/SET_PANEL\"; panel: IPanel };\n\nconst INITIAL: State = {\n  theme: \"dark\",\n  language: \"EN\",\n  modalOpen: false,\n};\n\nexport const stateReducer = (state = INITIAL, action: Actions): State => {\n  switch (action.type) {\n    case \"state/THEME\":\n      return { ...state, theme: action.theme };\n    case \"state/LANGUAGE\":\n      return { ...state, language: action.language };\n    case \"state/MODAL\":\n      return { ...state, modalOpen: action.open };\n    case \"state/SET_PANEL\":\n      return { ...state, panel: action.panel };\n    default:\n      return state;\n  }\n};\n\nexport const useGlobalState = () =>\n  useSelector<AppState, State>(store => store.state);\n","import React from \"react\";\nimport { useDispatch } from \"react-redux\";\n\nimport FakeInput from \"Components/FakeInput\";\nimport Modal from \"Components/Modal\";\n\nimport { useGlobalState } from \"Redux/state\";\nimport { useTasks } from \"Redux/task\";\n\nconst TaskModal: React.FC = () => {\n  const GlobalState = useGlobalState();\n  const dispatch = useDispatch();\n  const tasks = useTasks();\n\n  if (!GlobalState.panel || !GlobalState.taskID) return <></>;\n\n  return (\n    <Modal\n      isOpen={GlobalState.modalOpen}\n      aria-label=\"tasks\"\n      size=\"lg\"\n      onClose={() =>\n        dispatch({\n          type: \"state/MODAL\",\n          open: false,\n        })\n      }\n      header={() => (\n        <FakeInput\n          disabled={GlobalState.panel?.taskFieldDisplay === \"id\"}\n          value={\n            tasks[GlobalState.taskID as string][\n              GlobalState.panel?.taskFieldDisplay || \"title\"\n            ]\n          }\n          onChange={(e: React.ChangeEvent<HTMLInputElement>) => {\n            console.log(e.target.value);\n          }}\n        />\n      )}\n    ></Modal>\n  );\n};\n\nexport default TaskModal;\n","import { useSelector } from \"react-redux\";\n\nimport AppState, { Tasks } from \"Interfaces/AppState\";\nimport { Task as ITask } from \"Interfaces/Task\";\n\ntype Actions =\n  | { type: \"task/GET\"; panel: string }\n  | { type: \"task/SET\"; tasks: Array<ITask> }\n  | { type: \"task/UPDATE\"; id: string; task: Partial<ITask> };\n\nexport const tasksReducer = (state: Tasks = {}, action: Actions): Tasks => {\n  switch (action.type) {\n    case \"task/UPDATE\":\n      if (!state[action.id]) return state;\n\n      return {\n        ...state,\n        [action.id]: {\n          ...state[action.id],\n          ...action.task,\n        },\n      };\n    case \"task/GET\":\n      // Get Tasks From DB\n      const tasksGeted: Array<ITask> = [];\n\n      const newTasks: Tasks = {};\n\n      for (const task of tasksGeted) {\n        newTasks[task.id] = task;\n      }\n\n      return newTasks;\n    case \"task/SET\":\n      const tasks: Tasks = {};\n\n      for (const task of action.tasks) {\n        tasks[task.id] = task;\n      }\n\n      return tasks;\n    default:\n      return state;\n  }\n};\n\nexport const useTasks = () =>\n  useSelector<AppState, Tasks>(store => store.tasks);\n","import styled from \"styled-components\";\n\nexport const Container = styled.div`\n  height: 100vh;\n  overflow-x: hidden;\n`;\n","import React, { useState, useEffect } from \"react\";\n\nimport Panel from \"Components/Panel\";\nimport TaskModal from \"Components/TaskModal\";\n\nimport { Panel as IPanel } from \"Interfaces/Panel\";\n\nimport { Container } from \"./style\";\n\nimport { panel as TempPanel } from \"Temp/initialData\";\n\nconst Home: React.FC = () => {\n  const [panel, setPanel] = useState<IPanel>();\n\n  useEffect(() => setPanel(TempPanel), []);\n\n  return (\n    <Container>\n      <TaskModal />\n      {panel && <Panel id={panel.id} />}\n    </Container>\n  );\n};\n\nexport default Home;\n","import { createStore, combineReducers } from \"redux\";\n\nimport { stateReducer } from \"./state\";\nimport { tasksReducer } from \"./task\";\n\nconst reducers = {\n  state: stateReducer,\n  tasks: tasksReducer,\n};\n\nexport type AppState = {\n  [T in keyof typeof reducers]: ReturnType<typeof reducers[T]>;\n};\n\nexport default createStore(combineReducers<AppState>(reducers));\n","import { library } from \"@fortawesome/fontawesome-svg-core\";\n//\nimport { faTimes } from \"@fortawesome/free-solid-svg-icons\";\n\nlibrary.add(faTimes);\n\nexport default library;\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport { Provider } from \"react-redux\";\n\nimport * as serviceWorker from \"./serviceWorker\";\n\nimport Home from \"Views/Home\";\n\nimport store from \"Redux/store\";\n\nimport \"Config/fontawesome\";\n\nimport \"./index.css\";\n\nReactDOM.render(\n  <Provider store={store}>\n    <Home />\n  </Provider>,\n  document.getElementById(\"root\"),\n);\n\nserviceWorker.register();\n"],"sourceRoot":""}